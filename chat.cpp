//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "chat.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::AccessDenied> iceC_Chat_AccessDenied_init("::Chat::AccessDenied");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::UserExists> iceC_Chat_UserExists_init("::Chat::UserExists");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::RoomExists> iceC_Chat_RoomExists_init("::Chat::RoomExists");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NoSuchRoom> iceC_Chat_NoSuchRoom_init("::Chat::NoSuchRoom");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::RoomFactoryExists> iceC_Chat_RoomFactoryExists_init("::Chat::RoomFactoryExists");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NoSuchRoomFactory> iceC_Chat_NoSuchRoomFactory_init("::Chat::NoSuchRoomFactory");

const ::std::string iceC_Chat_Lobby_ids[2] =
{
    "::Chat::Lobby",
    "::Ice::Object"
};
const ::std::string iceC_Chat_Lobby_ops[] =
{
    "createRoom",
    "findRoom",
    "getRooms",
    "getUsers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "logout",
    "registerRoomFactory",
    "unregisterRoomFactory",
    "userLogin",
    "userRegister"
};
const ::std::string iceC_Chat_Lobby_userRegister_name = "userRegister";
const ::std::string iceC_Chat_Lobby_userLogin_name = "userLogin";
const ::std::string iceC_Chat_Lobby_logout_name = "logout";
const ::std::string iceC_Chat_Lobby_getRooms_name = "getRooms";
const ::std::string iceC_Chat_Lobby_getUsers_name = "getUsers";
const ::std::string iceC_Chat_Lobby_createRoom_name = "createRoom";
const ::std::string iceC_Chat_Lobby_findRoom_name = "findRoom";
const ::std::string iceC_Chat_Lobby_registerRoomFactory_name = "registerRoomFactory";
const ::std::string iceC_Chat_Lobby_unregisterRoomFactory_name = "unregisterRoomFactory";

const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};
const ::std::string iceC_Chat_User_ops[] =
{
    "getName",
    "getStatus",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "receiveMessage",
    "receivePrivateMessage",
    "setName"
};
const ::std::string iceC_Chat_User_getName_name = "getName";
const ::std::string iceC_Chat_User_getStatus_name = "getStatus";
const ::std::string iceC_Chat_User_setName_name = "setName";
const ::std::string iceC_Chat_User_receivePrivateMessage_name = "receivePrivateMessage";
const ::std::string iceC_Chat_User_receiveMessage_name = "receiveMessage";

const ::std::string iceC_Chat_Room_ids[2] =
{
    "::Chat::Room",
    "::Ice::Object"
};
const ::std::string iceC_Chat_Room_ops[] =
{
    "getName",
    "getUsers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "join",
    "leave",
    "sendMessage"
};
const ::std::string iceC_Chat_Room_getName_name = "getName";
const ::std::string iceC_Chat_Room_getUsers_name = "getUsers";
const ::std::string iceC_Chat_Room_join_name = "join";
const ::std::string iceC_Chat_Room_leave_name = "leave";
const ::std::string iceC_Chat_Room_sendMessage_name = "sendMessage";

const ::std::string iceC_Chat_RoomFactory_ids[2] =
{
    "::Chat::RoomFactory",
    "::Ice::Object"
};
const ::std::string iceC_Chat_RoomFactory_ops[] =
{
    "createRoom",
    "getServerLoad",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Chat_RoomFactory_getServerLoad_name = "getServerLoad";
const ::std::string iceC_Chat_RoomFactory_createRoom_name = "createRoom";

}

Chat::AccessDenied::~AccessDenied()
{
}

const ::std::string&
Chat::AccessDenied::ice_staticId()
{
    static const ::std::string typeId = "::Chat::AccessDenied";
    return typeId;
}

Chat::UserExists::~UserExists()
{
}

const ::std::string&
Chat::UserExists::ice_staticId()
{
    static const ::std::string typeId = "::Chat::UserExists";
    return typeId;
}

Chat::RoomExists::~RoomExists()
{
}

const ::std::string&
Chat::RoomExists::ice_staticId()
{
    static const ::std::string typeId = "::Chat::RoomExists";
    return typeId;
}

Chat::NoSuchRoom::~NoSuchRoom()
{
}

const ::std::string&
Chat::NoSuchRoom::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NoSuchRoom";
    return typeId;
}

Chat::RoomFactoryExists::~RoomFactoryExists()
{
}

const ::std::string&
Chat::RoomFactoryExists::ice_staticId()
{
    static const ::std::string typeId = "::Chat::RoomFactoryExists";
    return typeId;
}

Chat::NoSuchRoomFactory::~NoSuchRoomFactory()
{
}

const ::std::string&
Chat::NoSuchRoomFactory::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NoSuchRoomFactory";
    return typeId;
}

bool
Chat::Lobby::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Lobby_ids, iceC_Chat_Lobby_ids + 2, s);
}

::std::vector<::std::string>
Chat::Lobby::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_Lobby_ids[0], &iceC_Chat_Lobby_ids[2]);
}

::std::string
Chat::Lobby::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Lobby::ice_staticId()
{
    static const ::std::string typeId = "::Chat::Lobby";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_userRegister(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    ::std::string iceP_password;
    istr->readAll(iceP_user, iceP_password);
    inS.endReadParams();
    this->userRegister(::std::move(iceP_user), ::std::move(iceP_password), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_userLogin(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    ::std::string iceP_password;
    istr->readAll(iceP_user, iceP_password);
    inS.endReadParams();
    ::std::string ret = this->userLogin(::std::move(iceP_user), ::std::move(iceP_password), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_logout(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->logout(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Rooms ret = this->getRooms(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_getUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Users ret = this->getUsers(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_createRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<RoomPrx> ret = this->createRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_findRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<RoomPrx> ret = this->findRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_registerRoomFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<RoomFactoryPrx> iceP_roomFactory;
    istr->readAll(iceP_roomFactory);
    inS.endReadParams();
    this->registerRoomFactory(::std::move(iceP_roomFactory), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_unregisterRoomFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<RoomFactoryPrx> iceP_roomFactory;
    istr->readAll(iceP_roomFactory);
    inS.endReadParams();
    this->unregisterRoomFactory(::std::move(iceP_roomFactory), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Lobby_ops, iceC_Chat_Lobby_ops + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Lobby_ops)
    {
        case 0:
        {
            return _iceD_createRoom(in, current);
        }
        case 1:
        {
            return _iceD_findRoom(in, current);
        }
        case 2:
        {
            return _iceD_getRooms(in, current);
        }
        case 3:
        {
            return _iceD_getUsers(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_logout(in, current);
        }
        case 9:
        {
            return _iceD_registerRoomFactory(in, current);
        }
        case 10:
        {
            return _iceD_unregisterRoomFactory(in, current);
        }
        case 11:
        {
            return _iceD_userLogin(in, current);
        }
        case 12:
        {
            return _iceD_userRegister(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::User::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector<::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

::std::string
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
    static const ::std::string typeId = "::Chat::User";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_getStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    UserStatus ret = this->getStatus(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_setName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    this->setName(::std::move(iceP_name), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receivePrivateMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_fromUser;
    ::std::string iceP_message;
    istr->readAll(iceP_fromUser, iceP_message);
    inS.endReadParams();
    this->receivePrivateMessage(::std::move(iceP_fromUser), ::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receiveMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_fromRoom;
    ::std::shared_ptr<UserPrx> iceP_fromUser;
    ::std::string iceP_message;
    istr->readAll(iceP_fromRoom, iceP_fromUser, iceP_message);
    inS.endReadParams();
    this->receiveMessage(::std::move(iceP_fromRoom), ::std::move(iceP_fromUser), ::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_ops, iceC_Chat_User_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_ops)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_getStatus(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_receiveMessage(in, current);
        }
        case 7:
        {
            return _iceD_receivePrivateMessage(in, current);
        }
        case 8:
        {
            return _iceD_setName(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::Room::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Room_ids, iceC_Chat_Room_ids + 2, s);
}

::std::vector<::std::string>
Chat::Room::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_Room_ids[0], &iceC_Chat_Room_ids[2]);
}

::std::string
Chat::Room::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Room::ice_staticId()
{
    static const ::std::string typeId = "::Chat::Room";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::Room::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Users ret = this->getUsers(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_join(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->join(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_leave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->leave(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_sendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_fromUser;
    ::std::string iceP_message;
    istr->readAll(iceP_fromUser, iceP_message);
    inS.endReadParams();
    this->sendMessage(::std::move(iceP_fromUser), ::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Room_ops, iceC_Chat_Room_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Room_ops)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_getUsers(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_join(in, current);
        }
        case 7:
        {
            return _iceD_leave(in, current);
        }
        case 8:
        {
            return _iceD_sendMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::RoomFactory::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_RoomFactory_ids, iceC_Chat_RoomFactory_ids + 2, s);
}

::std::vector<::std::string>
Chat::RoomFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_RoomFactory_ids[0], &iceC_Chat_RoomFactory_ids[2]);
}

::std::string
Chat::RoomFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::RoomFactory::ice_staticId()
{
    static const ::std::string typeId = "::Chat::RoomFactory";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceD_getServerLoad(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    double ret = this->getServerLoad(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceD_createRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<RoomPrx> ret = this->createRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_RoomFactory_ops, iceC_Chat_RoomFactory_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_RoomFactory_ops)
    {
        case 0:
        {
            return _iceD_createRoom(in, current);
        }
        case 1:
        {
            return _iceD_getServerLoad(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Chat::LobbyPrx::_iceI_userRegister(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Lobby_userRegister_name);
    outAsync->invoke(iceC_Chat_Lobby_userRegister_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user, iceP_password);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::LobbyPrx::_iceI_userLogin(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Lobby_userLogin_name);
    outAsync->invoke(iceC_Chat_Lobby_userLogin_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user, iceP_password);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AccessDenied&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::LobbyPrx::_iceI_logout(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Lobby_logout_name);
    outAsync->invoke(iceC_Chat_Lobby_logout_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AccessDenied&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::LobbyPrx::_iceI_getRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::Rooms>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Lobby_getRooms_name);
    outAsync->invoke(iceC_Chat_Lobby_getRooms_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AccessDenied&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::LobbyPrx::_iceI_getUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::Users>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Lobby_getUsers_name);
    outAsync->invoke(iceC_Chat_Lobby_getUsers_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::LobbyPrx::_iceI_createRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Lobby_createRoom_name);
    outAsync->invoke(iceC_Chat_Lobby_createRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AccessDenied&)
            {
                throw;
            }
            catch(const RoomExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::LobbyPrx::_iceI_findRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Lobby_findRoom_name);
    outAsync->invoke(iceC_Chat_Lobby_findRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AccessDenied&)
            {
                throw;
            }
            catch(const NoSuchRoom&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::LobbyPrx::_iceI_registerRoomFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<RoomFactoryPrx>& iceP_roomFactory, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Lobby_registerRoomFactory_name);
    outAsync->invoke(iceC_Chat_Lobby_registerRoomFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_roomFactory);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const RoomFactoryExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::LobbyPrx::_iceI_unregisterRoomFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<RoomFactoryPrx>& iceP_roomFactory, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Lobby_unregisterRoomFactory_name);
    outAsync->invoke(iceC_Chat_Lobby_unregisterRoomFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_roomFactory);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NoSuchRoomFactory&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::LobbyPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LobbyPrx>();
}
/// \endcond

const ::std::string&
Chat::LobbyPrx::ice_staticId()
{
    return Lobby::ice_staticId();
}

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name);
    outAsync->invoke(iceC_Chat_User_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_getStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::UserStatus>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_User_getStatus_name);
    outAsync->invoke(iceC_Chat_User_getStatus_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_setName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_setName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_receivePrivateMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_fromUser, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_receivePrivateMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_fromUser, iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_receiveMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_fromRoom, const ::std::shared_ptr<UserPrx>& iceP_fromUser, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_receiveMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_fromRoom, iceP_fromUser, iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::UserPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UserPrx>();
}
/// \endcond

const ::std::string&
Chat::UserPrx::ice_staticId()
{
    return User::ice_staticId();
}

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_getName_name);
    outAsync->invoke(iceC_Chat_Room_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_getUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::Users>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_getUsers_name);
    outAsync->invoke(iceC_Chat_Room_getUsers_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_join(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_Room_join_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_leave(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_Room_leave_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_fromUser, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_Room_sendMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_fromUser, iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::RoomPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RoomPrx>();
}
/// \endcond

const ::std::string&
Chat::RoomPrx::ice_staticId()
{
    return Room::ice_staticId();
}

/// \cond INTERNAL
void
Chat::RoomFactoryPrx::_iceI_getServerLoad(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<double>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_RoomFactory_getServerLoad_name);
    outAsync->invoke(iceC_Chat_RoomFactory_getServerLoad_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomFactoryPrx::_iceI_createRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_RoomFactory_createRoom_name);
    outAsync->invoke(iceC_Chat_RoomFactory_createRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const RoomExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::RoomFactoryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RoomFactoryPrx>();
}
/// \endcond

const ::std::string&
Chat::RoomFactoryPrx::ice_staticId()
{
    return RoomFactory::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Chat_Lobby_userRegister_name = "userRegister";

const ::std::string iceC_Chat_Lobby_userLogin_name = "userLogin";

const ::std::string iceC_Chat_Lobby_logout_name = "logout";

const ::std::string iceC_Chat_Lobby_getRooms_name = "getRooms";

const ::std::string iceC_Chat_Lobby_getUsers_name = "getUsers";

const ::std::string iceC_Chat_Lobby_createRoom_name = "createRoom";

const ::std::string iceC_Chat_Lobby_findRoom_name = "findRoom";

const ::std::string iceC_Chat_Lobby_registerRoomFactory_name = "registerRoomFactory";

const ::std::string iceC_Chat_Lobby_unregisterRoomFactory_name = "unregisterRoomFactory";

const ::std::string iceC_Chat_User_getName_name = "getName";

const ::std::string iceC_Chat_User_getStatus_name = "getStatus";

const ::std::string iceC_Chat_User_setName_name = "setName";

const ::std::string iceC_Chat_User_receivePrivateMessage_name = "receivePrivateMessage";

const ::std::string iceC_Chat_User_receiveMessage_name = "receiveMessage";

const ::std::string iceC_Chat_Room_getName_name = "getName";

const ::std::string iceC_Chat_Room_getUsers_name = "getUsers";

const ::std::string iceC_Chat_Room_join_name = "join";

const ::std::string iceC_Chat_Room_leave_name = "leave";

const ::std::string iceC_Chat_Room_sendMessage_name = "sendMessage";

const ::std::string iceC_Chat_RoomFactory_getServerLoad_name = "getServerLoad";

const ::std::string iceC_Chat_RoomFactory_createRoom_name = "createRoom";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::AccessDenied> iceC_Chat_AccessDenied_init("::Chat::AccessDenied");

}

#ifdef ICE_CPP11_COMPILER
Chat::AccessDenied::~AccessDenied()
{
}
#else
Chat::AccessDenied::~AccessDenied() throw()
{
}
#endif

::std::string
Chat::AccessDenied::ice_id() const
{
    return "::Chat::AccessDenied";
}

Chat::AccessDenied*
Chat::AccessDenied::ice_clone() const
{
    return new AccessDenied(*this);
}

void
Chat::AccessDenied::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::AccessDenied::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::AccessDenied", -1, true);
    ::Ice::StreamWriter< AccessDenied, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::AccessDenied::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< AccessDenied, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserExists> iceC_Chat_UserExists_init("::Chat::UserExists");

}

#ifdef ICE_CPP11_COMPILER
Chat::UserExists::~UserExists()
{
}
#else
Chat::UserExists::~UserExists() throw()
{
}
#endif

::std::string
Chat::UserExists::ice_id() const
{
    return "::Chat::UserExists";
}

Chat::UserExists*
Chat::UserExists::ice_clone() const
{
    return new UserExists(*this);
}

void
Chat::UserExists::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::UserExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::UserExists", -1, true);
    ::Ice::StreamWriter< UserExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::UserExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UserExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::RoomExists> iceC_Chat_RoomExists_init("::Chat::RoomExists");

}

#ifdef ICE_CPP11_COMPILER
Chat::RoomExists::~RoomExists()
{
}
#else
Chat::RoomExists::~RoomExists() throw()
{
}
#endif

::std::string
Chat::RoomExists::ice_id() const
{
    return "::Chat::RoomExists";
}

Chat::RoomExists*
Chat::RoomExists::ice_clone() const
{
    return new RoomExists(*this);
}

void
Chat::RoomExists::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::RoomExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::RoomExists", -1, true);
    ::Ice::StreamWriter< RoomExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::RoomExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RoomExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NoSuchRoom> iceC_Chat_NoSuchRoom_init("::Chat::NoSuchRoom");

}

#ifdef ICE_CPP11_COMPILER
Chat::NoSuchRoom::~NoSuchRoom()
{
}
#else
Chat::NoSuchRoom::~NoSuchRoom() throw()
{
}
#endif

::std::string
Chat::NoSuchRoom::ice_id() const
{
    return "::Chat::NoSuchRoom";
}

Chat::NoSuchRoom*
Chat::NoSuchRoom::ice_clone() const
{
    return new NoSuchRoom(*this);
}

void
Chat::NoSuchRoom::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::NoSuchRoom::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NoSuchRoom", -1, true);
    ::Ice::StreamWriter< NoSuchRoom, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NoSuchRoom::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NoSuchRoom, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::RoomFactoryExists> iceC_Chat_RoomFactoryExists_init("::Chat::RoomFactoryExists");

}

#ifdef ICE_CPP11_COMPILER
Chat::RoomFactoryExists::~RoomFactoryExists()
{
}
#else
Chat::RoomFactoryExists::~RoomFactoryExists() throw()
{
}
#endif

::std::string
Chat::RoomFactoryExists::ice_id() const
{
    return "::Chat::RoomFactoryExists";
}

Chat::RoomFactoryExists*
Chat::RoomFactoryExists::ice_clone() const
{
    return new RoomFactoryExists(*this);
}

void
Chat::RoomFactoryExists::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::RoomFactoryExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::RoomFactoryExists", -1, true);
    ::Ice::StreamWriter< RoomFactoryExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::RoomFactoryExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RoomFactoryExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NoSuchRoomFactory> iceC_Chat_NoSuchRoomFactory_init("::Chat::NoSuchRoomFactory");

}

#ifdef ICE_CPP11_COMPILER
Chat::NoSuchRoomFactory::~NoSuchRoomFactory()
{
}
#else
Chat::NoSuchRoomFactory::~NoSuchRoomFactory() throw()
{
}
#endif

::std::string
Chat::NoSuchRoomFactory::ice_id() const
{
    return "::Chat::NoSuchRoomFactory";
}

Chat::NoSuchRoomFactory*
Chat::NoSuchRoomFactory::ice_clone() const
{
    return new NoSuchRoomFactory(*this);
}

void
Chat::NoSuchRoomFactory::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::NoSuchRoomFactory::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NoSuchRoomFactory", -1, true);
    ::Ice::StreamWriter< NoSuchRoomFactory, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NoSuchRoomFactory::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NoSuchRoomFactory, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(Lobby* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Lobby>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Lobby;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::Lobby::_iceI_begin_userRegister(const ::Chat::UserPrx& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Lobby_userRegister_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Lobby_userRegister_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Lobby_userRegister_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        ostr->write(iceP_password);
        result->endWriteParams();
        result->invoke(iceC_Chat_Lobby_userRegister_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Lobby::end_userRegister(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Lobby_userRegister_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::Lobby::_iceI_begin_userLogin(const ::Chat::UserPrx& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Lobby_userLogin_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Lobby_userLogin_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Lobby_userLogin_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        ostr->write(iceP_password);
        result->endWriteParams();
        result->invoke(iceC_Chat_Lobby_userLogin_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::Lobby::end_userLogin(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Lobby_userLogin_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::AccessDenied&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Lobby::_iceI_begin_logout(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Lobby_logout_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Lobby_logout_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Lobby_logout_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Lobby_logout_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Lobby::end_logout(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Lobby_logout_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::AccessDenied&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::Lobby::_iceI_begin_getRooms(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Lobby_getRooms_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Lobby_getRooms_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Lobby_getRooms_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Lobby_getRooms_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::Rooms
IceProxy::Chat::Lobby::end_getRooms(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Lobby_getRooms_name);
    ::Chat::Rooms ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::AccessDenied&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Lobby::_iceI_begin_getUsers(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Lobby_getUsers_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Lobby_getUsers_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Lobby_getUsers_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Lobby_getUsers_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::Users
IceProxy::Chat::Lobby::end_getUsers(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Lobby_getUsers_name);
    ::Chat::Users ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Lobby::_iceI_begin_createRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Lobby_createRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Lobby_createRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Lobby_createRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_Lobby_createRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomPrx
IceProxy::Chat::Lobby::end_createRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Lobby_createRoom_name);
    ::Chat::RoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::AccessDenied&)
        {
            throw;
        }
        catch(const ::Chat::RoomExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Lobby::_iceI_begin_findRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Lobby_findRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Lobby_findRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Lobby_findRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_Lobby_findRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomPrx
IceProxy::Chat::Lobby::end_findRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Lobby_findRoom_name);
    ::Chat::RoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::AccessDenied&)
        {
            throw;
        }
        catch(const ::Chat::NoSuchRoom&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Lobby::_iceI_begin_registerRoomFactory(const ::Chat::RoomFactoryPrx& iceP_roomFactory, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Lobby_registerRoomFactory_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Lobby_registerRoomFactory_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Lobby_registerRoomFactory_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_roomFactory);
        result->endWriteParams();
        result->invoke(iceC_Chat_Lobby_registerRoomFactory_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Lobby::end_registerRoomFactory(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Lobby_registerRoomFactory_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::RoomFactoryExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::Lobby::_iceI_begin_unregisterRoomFactory(const ::Chat::RoomFactoryPrx& iceP_roomFactory, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Lobby_unregisterRoomFactory_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Lobby_unregisterRoomFactory_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Lobby_unregisterRoomFactory_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_roomFactory);
        result->endWriteParams();
        result->invoke(iceC_Chat_Lobby_unregisterRoomFactory_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Lobby::end_unregisterRoomFactory(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Lobby_unregisterRoomFactory_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NoSuchRoomFactory&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::Lobby::_newInstance() const
{
    return new Lobby;
}
/// \endcond

const ::std::string&
IceProxy::Chat::Lobby::ice_staticId()
{
    return ::Chat::Lobby::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(User* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< User>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new User;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_User_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::User::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_User_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_getStatus(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_User_getStatus_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_getStatus_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_getStatus_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_User_getStatus_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::UserStatus
IceProxy::Chat::User::end_getStatus(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_User_getStatus_name);
    ::Chat::UserStatus ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_setName(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_setName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_setName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_setName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_setName(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_setName_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_receivePrivateMessage(const ::Chat::UserPrx& iceP_fromUser, const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_receivePrivateMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_receivePrivateMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_fromUser);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_receivePrivateMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_receivePrivateMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_receivePrivateMessage_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_receiveMessage(const ::std::string& iceP_fromRoom, const ::Chat::UserPrx& iceP_fromUser, const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_receiveMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_receiveMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_fromRoom);
        ostr->write(iceP_fromUser);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_receiveMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_receiveMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_receiveMessage_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::User::_newInstance() const
{
    return new User;
}
/// \endcond

const ::std::string&
IceProxy::Chat::User::ice_staticId()
{
    return ::Chat::User::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(Room* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Room>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Room;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Room_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::Room::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_getUsers(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_getUsers_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_getUsers_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_getUsers_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Room_getUsers_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::Users
IceProxy::Chat::Room::end_getUsers(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_getUsers_name);
    ::Chat::Users ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_join(const ::Chat::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_join_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_join_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_join_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_join(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_Room_join_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_leave(const ::Chat::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_leave_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_leave_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_leave_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_leave(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_Room_leave_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_sendMessage(const ::Chat::UserPrx& iceP_fromUser, const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_sendMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_sendMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_fromUser);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_sendMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_sendMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_Room_sendMessage_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::Room::_newInstance() const
{
    return new Room;
}
/// \endcond

const ::std::string&
IceProxy::Chat::Room::ice_staticId()
{
    return ::Chat::Room::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(RoomFactory* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< RoomFactory>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new RoomFactory;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::RoomFactory::_iceI_begin_getServerLoad(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_RoomFactory_getServerLoad_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_RoomFactory_getServerLoad_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_RoomFactory_getServerLoad_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_RoomFactory_getServerLoad_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Double
IceProxy::Chat::RoomFactory::end_getServerLoad(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_RoomFactory_getServerLoad_name);
    ::Ice::Double ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::RoomFactory::_iceI_begin_createRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_RoomFactory_createRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_RoomFactory_createRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_RoomFactory_createRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_RoomFactory_createRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomPrx
IceProxy::Chat::RoomFactory::end_createRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_RoomFactory_createRoom_name);
    ::Chat::RoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::RoomExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::RoomFactory::_newInstance() const
{
    return new RoomFactory;
}
/// \endcond

const ::std::string&
IceProxy::Chat::RoomFactory::ice_staticId()
{
    return ::Chat::RoomFactory::ice_staticId();
}

Chat::Lobby::~Lobby()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(Lobby* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_Lobby_ids[2] =
{
    "::Chat::Lobby",
    "::Ice::Object"
};

}

bool
Chat::Lobby::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Lobby_ids, iceC_Chat_Lobby_ids + 2, s);
}

::std::vector< ::std::string>
Chat::Lobby::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_Lobby_ids[0], &iceC_Chat_Lobby_ids[2]);
}

const ::std::string&
Chat::Lobby::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Lobby::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::Lobby";
    return typeId;
#else
    return iceC_Chat_Lobby_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_userRegister(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    ::std::string iceP_password;
    istr->read(iceP_user);
    istr->read(iceP_password);
    inS.endReadParams();
    this->userRegister(iceP_user, iceP_password, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_userLogin(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    ::std::string iceP_password;
    istr->read(iceP_user);
    istr->read(iceP_password);
    inS.endReadParams();
    ::std::string ret = this->userLogin(iceP_user, iceP_password, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_logout(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->logout(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Rooms ret = this->getRooms(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_getUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Users ret = this->getUsers(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_createRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    RoomPrx ret = this->createRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_findRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    RoomPrx ret = this->findRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_registerRoomFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    RoomFactoryPrx iceP_roomFactory;
    istr->read(iceP_roomFactory);
    inS.endReadParams();
    this->registerRoomFactory(iceP_roomFactory, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Lobby::_iceD_unregisterRoomFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    RoomFactoryPrx iceP_roomFactory;
    istr->read(iceP_roomFactory);
    inS.endReadParams();
    this->unregisterRoomFactory(iceP_roomFactory, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_Lobby_all[] =
{
    "createRoom",
    "findRoom",
    "getRooms",
    "getUsers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "logout",
    "registerRoomFactory",
    "unregisterRoomFactory",
    "userLogin",
    "userRegister"
};

}

/// \cond INTERNAL
bool
Chat::Lobby::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Lobby_all, iceC_Chat_Lobby_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Lobby_all)
    {
        case 0:
        {
            return _iceD_createRoom(in, current);
        }
        case 1:
        {
            return _iceD_findRoom(in, current);
        }
        case 2:
        {
            return _iceD_getRooms(in, current);
        }
        case 3:
        {
            return _iceD_getUsers(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_logout(in, current);
        }
        case 9:
        {
            return _iceD_registerRoomFactory(in, current);
        }
        case 10:
        {
            return _iceD_unregisterRoomFactory(in, current);
        }
        case 11:
        {
            return _iceD_userLogin(in, current);
        }
        case 12:
        {
            return _iceD_userRegister(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::Lobby::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Lobby, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::Lobby::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Lobby, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(LobbyPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LobbyPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Lobby::ice_staticId(), v);
    }
}
/// \endcond

Chat::User::~User()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(User* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};

}

bool
Chat::User::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector< ::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

const ::std::string&
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::User";
    return typeId;
#else
    return iceC_Chat_User_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_getStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    UserStatus ret = this->getStatus(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_setName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    this->setName(iceP_name, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receivePrivateMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_fromUser;
    ::std::string iceP_message;
    istr->read(iceP_fromUser);
    istr->read(iceP_message);
    inS.endReadParams();
    this->receivePrivateMessage(iceP_fromUser, iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receiveMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_fromRoom;
    UserPrx iceP_fromUser;
    ::std::string iceP_message;
    istr->read(iceP_fromRoom);
    istr->read(iceP_fromUser);
    istr->read(iceP_message);
    inS.endReadParams();
    this->receiveMessage(iceP_fromRoom, iceP_fromUser, iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_User_all[] =
{
    "getName",
    "getStatus",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "receiveMessage",
    "receivePrivateMessage",
    "setName"
};

}

/// \cond INTERNAL
bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_all, iceC_Chat_User_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_all)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_getStatus(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_receiveMessage(in, current);
        }
        case 7:
        {
            return _iceD_receivePrivateMessage(in, current);
        }
        case 8:
        {
            return _iceD_setName(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::User::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< User, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::User::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< User, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(UserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = UserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(User::ice_staticId(), v);
    }
}
/// \endcond

Chat::Room::~Room()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(Room* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_Room_ids[2] =
{
    "::Chat::Room",
    "::Ice::Object"
};

}

bool
Chat::Room::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Room_ids, iceC_Chat_Room_ids + 2, s);
}

::std::vector< ::std::string>
Chat::Room::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_Room_ids[0], &iceC_Chat_Room_ids[2]);
}

const ::std::string&
Chat::Room::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Room::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::Room";
    return typeId;
#else
    return iceC_Chat_Room_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::Room::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Users ret = this->getUsers(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_join(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->join(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_leave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->leave(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_sendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_fromUser;
    ::std::string iceP_message;
    istr->read(iceP_fromUser);
    istr->read(iceP_message);
    inS.endReadParams();
    this->sendMessage(iceP_fromUser, iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_Room_all[] =
{
    "getName",
    "getUsers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "join",
    "leave",
    "sendMessage"
};

}

/// \cond INTERNAL
bool
Chat::Room::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Room_all, iceC_Chat_Room_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Room_all)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_getUsers(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_join(in, current);
        }
        case 7:
        {
            return _iceD_leave(in, current);
        }
        case 8:
        {
            return _iceD_sendMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::Room::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Room, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::Room::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Room, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(RoomPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RoomPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Room::ice_staticId(), v);
    }
}
/// \endcond

Chat::RoomFactory::~RoomFactory()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(RoomFactory* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_RoomFactory_ids[2] =
{
    "::Chat::RoomFactory",
    "::Ice::Object"
};

}

bool
Chat::RoomFactory::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_RoomFactory_ids, iceC_Chat_RoomFactory_ids + 2, s);
}

::std::vector< ::std::string>
Chat::RoomFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_RoomFactory_ids[0], &iceC_Chat_RoomFactory_ids[2]);
}

const ::std::string&
Chat::RoomFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::RoomFactory::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::RoomFactory";
    return typeId;
#else
    return iceC_Chat_RoomFactory_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceD_getServerLoad(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Double ret = this->getServerLoad(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceD_createRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    RoomPrx ret = this->createRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_RoomFactory_all[] =
{
    "createRoom",
    "getServerLoad",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_RoomFactory_all, iceC_Chat_RoomFactory_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_RoomFactory_all)
    {
        case 0:
        {
            return _iceD_createRoom(in, current);
        }
        case 1:
        {
            return _iceD_getServerLoad(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::RoomFactory::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< RoomFactory, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::RoomFactory::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RoomFactory, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(RoomFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RoomFactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(RoomFactory::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
